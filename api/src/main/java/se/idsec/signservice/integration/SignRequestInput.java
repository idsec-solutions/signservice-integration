/*
 * Copyright 2019 IDsec Solutions AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package se.idsec.signservice.integration;

/**
 * Interface representing the input to a {@link SignServiceIntegrationService#createSignRequest(SignRequestInput)}
 * operation.
 * 
 * @author Martin Lindstr√∂m (martin@idsec.se)
 * @author Stefan Santesson (stefan@idsec.se)
 */
public interface SignRequestInput {

  /**
   * Returns a correlation ID (generated by the sign requester).
   * 
   * <p>
   * A sign requester may want to have the possibility to track an operation (via logs or by other means). Therefore,
   * the use of correlation ID:s is supported by the SignService Integration Service. If a correlation ID is supplied
   * this will be used in process and audit logs, and will be tied to the actual signature state ID that is generated by
   * the SignService Integration Service.
   * </p>
   * <p>
   * Note: The correlation ID is never sent to the sign service. It is only used within the SignService Integration
   * Service.
   * </p>
   * 
   * @return the correlation ID, or {@code null} if none is supplied
   */
  String getCorrelationId();

  /**
   * A SignService Integration Service may be running under different policies, where a policy tells which
   * {@link IntegrationServiceConfiguration} that is active. This method returns the policy to use for the operation.
   * 
   * @return the policy to use, or {@code null} will means that the default policy should be used
   */
  String getPolicy();

  /**
   * Returns the entityID of the entity that requests a signature.
   * <p>
   * If not provided the SignatureService Integration Service will use the default sign requester ID
   * ({@link IntegrationServiceConfiguration#getDefaultSignRequesterID()}).
   * </p>
   * 
   * @return the sign requester ID, or {@code null} if the default ID should be used
   */
  String getSignRequesterID();

  /**
   * Returns the URL to which the user agent along with the sign response message should be directed after a signature
   * operation.
   * 
   * <p>
   * If not provided the SignatureService Integration Service will use the default return URL
   * ({@link IntegrationServiceConfiguration#getDefaultReturnUrl()}).
   * </p>
   * 
   * @return the URL to which a sign response is to be returned, or {@code null} if the default URL should be used
   */
  String getReturnUrl();

  /**
   * Returns the signature service URL to where SignRequest messages should be posted.
   * 
   * <p>
   * If not provided the SignatureService Integration Service will use the default return URL
   * ({@link IntegrationServiceConfiguration#getDefaultDestinationUrl()}).
   * </p>
   * 
   * @return the signature service URL to where SignRequest messages should be posted, or {@code null} if the default
   *         URL should be used
   */
  String getDestinationUrl();

  /**
   * Returns the algorithm identifier for the signature algorithm that should be used to sign the specified signature
   * tasks.
   * <p>
   * If not provided the SignatureService Integration Service will use the default signature algorithm
   * ({@link IntegrationServiceConfiguration#getDefaultSignatureAlgorithm()}).
   * </p>
   * 
   * @return signature algorithm identifier
   */
  String getSignatureAlgorithm();
  
  AuthnRequirements getAuthnRequirements();
  
  /**
   * Returns the sign message parameters that is used to build the sign message element that is included in the {@code SignRequest}.
   * @return
   */
  SignMessageParameters getSignMessageParameters();

}
